#!/bin/env ruby

require 'date'
require 'csv'
require 'fileutils'

$program = File.basename(__FILE__)

def usage(status=0)
  puts "Useage: #{$program} command ..."
  puts
  puts "#{$program} list"
  puts "#{$program} init title"
  puts "#{$program} view title"
  puts "#{$program} add  title page [date]"

  exit status
end

def error(message)
  puts "#{$program}: #{message}"
  usage 1
end

def check_argv(length=1)
  if ARGV.length < length
    error "arguments error."
  end
end

def get_csv_filename(title)
  "./data/#{title}.csv"
end

def get_csv_filename_from_argv()
  check_argv
  yield get_csv_filename ARGV.shift
end

def write_to_csv(filename, headers, table)
  CSV.open(filename, "w") do |csv|
    csv << headers
    table.each do |line|
      csv << line
    end
  end
end

def add()
  check_argv(2)

  title = ARGV.shift
  filename = get_csv_filename title

  page = ARGV.shift

  if date_s = ARGV.shift
    date = Date.iso8601(date_s)
  else
    date = Date.today()
  end

  headers, *table = CSV.read(filename)

  index = (0...table.size).bsearch do |i|
   date >= Date.iso8601(table[i][0])
  end

  if index.nil?
    table.push [date.to_s, page]
  elsif Date.iso8601(table[index][0]) == date
    table[index][1] = page
  else
    table.insert(index, [date.to_s, page])
  end

  write_to_csv(filename, headers, table)
end

def main()
  check_argv

  case ARGV.shift
  when "add"
    add()
  when "init"
    get_csv_filename_from_argv do |filename|
      FileUtils.touch(filename)
      write_to_csv(filename, [:date, :page], [])
    end
  when "view"
    get_csv_filename_from_argv do |filename|
      pp CSV.read(filename)
    end
  when "list"
    Dir.glob("./data/*.csv").each do |file|
      puts File.basename(file, ".csv")
    end
  when "plot"
    get_csv_filename_from_argv do |filename|
      system("./plot #{filename}")
    end
  else
    error "undefined command"
  end
end

main
